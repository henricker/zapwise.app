generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String   @id @default(cuid())
  name           String?
  email          String   @unique
  emailVerified  DateTime?
  password       String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  accounts       Account[]
  sessions       Session[]

  Connection Connection[]
  Conversation Conversation[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  access_token      String? @map("accessToken")
  token_type        String? @map("tokenType")
  expires_at        Int?    @map("expiresAt")
  id_token          String? @map("idToken")
  refresh_token     String? @map("refreshToken")
  scope             String?
  session_state     String?

  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Conversation {
  id              String    @id @default(uuid())
  phone           String
  myPhone         String
  contactName String

  userId          String
  status          String?
  substatus       String?
  lastAnalysisAt  DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt


  messages        Message[]
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Message {
  id             String    @id @default(uuid())
  conversation   Conversation @relation(fields: [conversationId], references: [id])
  conversationId String
  fromMe         Boolean
  text           String
  type           String
  timestamp      DateTime
  createdAt      DateTime @default(now())
}

model Connection {
  id String @id @default(uuid())
  userId String
  sessionId String @unique
  phone String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt


  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}